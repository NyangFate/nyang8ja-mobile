/* tslint:disable */
/* eslint-disable */
/**
 * 냥팔자 API 명세
 * 냥파자는 상팔자 어플리케이션을 위한 API 명세서입니다. - 모든 API의 Path는 **\'/api\'로 시작**합니다. - 모든 API의 응답은 **공통 응답 형식**을 가집니다. data에 실제 응답 데이터가 들어갑니다.     ```json     {       \"requestId\": \"서버생성 요청ID\",       \"requestTime\": \"요청시간\",       \"success\": \"성공여부\",       \"data\": {         JSON 데이터       }     }     ```
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AppleSignInRequestDto,
    AppleSignInRequestDtoFromJSON,
    AppleSignInRequestDtoToJSON,
    KakaoSignInRequestDto,
    KakaoSignInRequestDtoFromJSON,
    KakaoSignInRequestDtoToJSON,
    TokenResponseDto,
    TokenResponseDtoFromJSON,
    TokenResponseDtoToJSON,
} from '../models';

export interface MobileAppleSignInRequest {
    appleSignInRequestDto: AppleSignInRequestDto;
}

export interface MobileKakaoSignInRequest {
    kakaoSignInRequestDto: KakaoSignInRequestDto;
}

/**
 * 
 */
export class Class00AuthAPIApi extends runtime.BaseAPI {

    /**
     * 애플 로그인을 합니다
     * 애플 로그인
     */
    async mobileAppleSignInRaw(requestParameters: MobileAppleSignInRequest): Promise<runtime.ApiResponse<TokenResponseDto>> {
        if (requestParameters.appleSignInRequestDto === null || requestParameters.appleSignInRequestDto === undefined) {
            throw new runtime.RequiredError('appleSignInRequestDto','Required parameter requestParameters.appleSignInRequestDto was null or undefined when calling mobileAppleSignIn.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/apple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppleSignInRequestDtoToJSON(requestParameters.appleSignInRequestDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseDtoFromJSON(jsonValue));
    }

    /**
     * 애플 로그인을 합니다
     * 애플 로그인
     */
    async mobileAppleSignIn(requestParameters: MobileAppleSignInRequest): Promise<TokenResponseDto> {
        const response = await this.mobileAppleSignInRaw(requestParameters);
        return await response.value();
    }

    /**
     * 카카오 로그인을 합니다
     * 카카오 로그인
     */
    async mobileKakaoSignInRaw(requestParameters: MobileKakaoSignInRequest): Promise<runtime.ApiResponse<TokenResponseDto>> {
        if (requestParameters.kakaoSignInRequestDto === null || requestParameters.kakaoSignInRequestDto === undefined) {
            throw new runtime.RequiredError('kakaoSignInRequestDto','Required parameter requestParameters.kakaoSignInRequestDto was null or undefined when calling mobileKakaoSignIn.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/kakao`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KakaoSignInRequestDtoToJSON(requestParameters.kakaoSignInRequestDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseDtoFromJSON(jsonValue));
    }

    /**
     * 카카오 로그인을 합니다
     * 카카오 로그인
     */
    async mobileKakaoSignIn(requestParameters: MobileKakaoSignInRequest): Promise<TokenResponseDto> {
        const response = await this.mobileKakaoSignInRaw(requestParameters);
        return await response.value();
    }

}
