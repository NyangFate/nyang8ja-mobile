/* tslint:disable */
/* eslint-disable */
/**
 * 냥팔자 API 명세
 * 냥파자는 상팔자 어플리케이션을 위한 API 명세서입니다. - 모든 API의 Path는 **\'/api\'로 시작**합니다. - 모든 API의 응답은 **공통 응답 형식**을 가집니다. data에 실제 응답 데이터가 들어갑니다.     ```json     {       \"requestId\": \"서버생성 요청ID\",       \"requestTime\": \"요청시간\",       \"success\": \"성공여부\",       \"data\": {         JSON 데이터       }     }     ```
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DummyRequestBodyDto,
    DummyRequestBodyDtoFromJSON,
    DummyRequestBodyDtoToJSON,
    DummyResponseDto,
    DummyResponseDtoFromJSON,
    DummyResponseDtoToJSON,
} from '../models';

export interface HealthCheckRequest {
    say: string;
    type?: HealthCheckTypeEnum;
}

export interface UserKeyCheckRequest {
    say: string;
    type?: UserKeyCheckTypeEnum;
}

export interface UserKeyCheck22Request {
    dummyRequestBodyDto: DummyRequestBodyDto;
}

/**
 * 
 */
export class Class99DummyTestApi extends runtime.BaseAPI {

    /**
     * 열심히 만들어보아요
     * 테스트용 GET API 입니다.
     */
    async healthCheckRaw(requestParameters: HealthCheckRequest): Promise<runtime.ApiResponse<DummyResponseDto>> {
        if (requestParameters.say === null || requestParameters.say === undefined) {
            throw new runtime.RequiredError('say','Required parameter requestParameters.say was null or undefined when calling healthCheck.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.say !== undefined) {
            queryParameters['say'] = requestParameters.say;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dummy/health-check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DummyResponseDtoFromJSON(jsonValue));
    }

    /**
     * 열심히 만들어보아요
     * 테스트용 GET API 입니다.
     */
    async healthCheck(requestParameters: HealthCheckRequest): Promise<DummyResponseDto> {
        const response = await this.healthCheckRaw(requestParameters);
        return await response.value();
    }

    /**
     * 유저 인증 쿠키가 필요합니다.
     * 테스트용 GET API 입니다.
     */
    async userKeyCheckRaw(requestParameters: UserKeyCheckRequest): Promise<runtime.ApiResponse<DummyResponseDto>> {
        if (requestParameters.say === null || requestParameters.say === undefined) {
            throw new runtime.RequiredError('say','Required parameter requestParameters.say was null or undefined when calling userKeyCheck.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.say !== undefined) {
            queryParameters['say'] = requestParameters.say;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Guest-ID"] = this.configuration.apiKey("X-Guest-ID"); // 유저 식별 Key authentication
        }

        const response = await this.request({
            path: `/dummy/health-check22`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DummyResponseDtoFromJSON(jsonValue));
    }

    /**
     * 유저 인증 쿠키가 필요합니다.
     * 테스트용 GET API 입니다.
     */
    async userKeyCheck(requestParameters: UserKeyCheckRequest): Promise<DummyResponseDto> {
        const response = await this.userKeyCheckRaw(requestParameters);
        return await response.value();
    }

    /**
     * 유저 인증 쿠키가 필요합니다.
     * 테스트용 POST API 입니다.
     */
    async userKeyCheck22Raw(requestParameters: UserKeyCheck22Request): Promise<runtime.ApiResponse<DummyResponseDto>> {
        if (requestParameters.dummyRequestBodyDto === null || requestParameters.dummyRequestBodyDto === undefined) {
            throw new runtime.RequiredError('dummyRequestBodyDto','Required parameter requestParameters.dummyRequestBodyDto was null or undefined when calling userKeyCheck22.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Guest-ID"] = this.configuration.apiKey("X-Guest-ID"); // 유저 식별 Key authentication
        }

        const response = await this.request({
            path: `/dummy/health-check333`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DummyRequestBodyDtoToJSON(requestParameters.dummyRequestBodyDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DummyResponseDtoFromJSON(jsonValue));
    }

    /**
     * 유저 인증 쿠키가 필요합니다.
     * 테스트용 POST API 입니다.
     */
    async userKeyCheck22(requestParameters: UserKeyCheck22Request): Promise<DummyResponseDto> {
        const response = await this.userKeyCheck22Raw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum HealthCheckTypeEnum {
    REPORT = 'REPORT',
    THANKS = 'THANKS',
    ETC = 'ETC'
}
/**
    * @export
    * @enum {string}
    */
export enum UserKeyCheckTypeEnum {
    REPORT = 'REPORT',
    THANKS = 'THANKS',
    ETC = 'ETC'
}
