/* tslint:disable */
/* eslint-disable */
/**
 * 냥팔자 API 명세
 * 냥파자는 상팔자 어플리케이션을 위한 API 명세서입니다. - 모든 API의 Path는 **\'/api\'로 시작**합니다. - 모든 API의 응답은 **공통 응답 형식**을 가집니다. data에 실제 응답 데이터가 들어갑니다.     ```json     {       \"requestId\": \"서버생성 요청ID\",       \"requestTime\": \"요청시간\",       \"success\": \"성공여부\",       \"data\": {         JSON 데이터       }     }     ```
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DivinationQuestionResponseDto
 */
export interface DivinationQuestionResponseDto {
    /**
     * 
     * @type {string}
     * @memberof DivinationQuestionResponseDto
     */
    annotation?: string;
    /**
     * 
     * @type {string}
     * @memberof DivinationQuestionResponseDto
     */
    category: DivinationQuestionResponseDtoCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof DivinationQuestionResponseDto
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof DivinationQuestionResponseDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof DivinationQuestionResponseDto
     */
    question: string;
    /**
     * 
     * @type {string}
     * @memberof DivinationQuestionResponseDto
     */
    type: DivinationQuestionResponseDtoTypeEnum;
}

export function DivinationQuestionResponseDtoFromJSON(json: any): DivinationQuestionResponseDto {
    return DivinationQuestionResponseDtoFromJSONTyped(json, false);
}

export function DivinationQuestionResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DivinationQuestionResponseDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'annotation': !exists(json, 'annotation') ? undefined : json['annotation'],
        'category': json['category'],
        'description': json['description'],
        'id': json['id'],
        'question': json['question'],
        'type': json['type'],
    };
}

export function DivinationQuestionResponseDtoToJSON(value?: DivinationQuestionResponseDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'annotation': value.annotation,
        'category': value.category,
        'description': value.description,
        'id': value.id,
        'question': value.question,
        'type': value.type,
    };
}

/**
* @export
* @enum {string}
*/
export enum DivinationQuestionResponseDtoCategoryEnum {
    SUMMARY = 'SUMMARY',
    LOVE = 'LOVE',
    WEALTH = 'WEALTH',
    CAREER = 'CAREER',
    HEALTH = 'HEALTH',
    ADVICE = 'ADVICE',
    NONE = 'NONE'
}
/**
* @export
* @enum {string}
*/
export enum DivinationQuestionResponseDtoTypeEnum {
    TAROT = 'TAROT',
    SAJU = 'SAJU',
    NONE = 'NONE'
}


